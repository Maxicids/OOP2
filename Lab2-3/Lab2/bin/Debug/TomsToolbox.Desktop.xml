<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>TomsToolbox.Desktop</name>
    </assembly>
    <members>
        <member name="T:TomsToolbox.Desktop.HGlobal">
            <summary>
            Wrapper for a global memory handle. 
            The memory will be allocated using <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" />; the memory will be freed when the object is disposed.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.HGlobal.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.HGlobal" /> class.
            </summary>
            <param name="size">The size of the memory block to allocate.</param>
        </member>
        <member name="P:TomsToolbox.Desktop.HGlobal.Size">
            <summary>
            Gets the size of the allocated memory block.
            </summary>
        </member>
        <member name="P:TomsToolbox.Desktop.HGlobal.Ptr">
            <summary>
            Gets the pointer to the allocated memory block.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.HGlobal.op_Implicit(TomsToolbox.Desktop.HGlobal)~System.IntPtr">
            <summary>
            Performs an implicit conversion from <see cref="T:TomsToolbox.Desktop.HGlobal" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="item">The item to convert.<p /><c>[CanBeNull]</c></param>
            <returns>
            The pointer to the allocated memory block.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.HGlobal.ToIntPtr(TomsToolbox.Desktop.HGlobal)">
            <summary>
            Performs a conversion from <see cref="T:TomsToolbox.Desktop.HGlobal" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="item">The item to convert.<p /><c>[CanBeNull]</c></param>
            <returns>
            The pointer to the allocated memory block.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.HGlobal.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.HGlobal.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TomsToolbox.Desktop.HGlobal" /> class.
            </summary>
        </member>
        <member name="T:TomsToolbox.Desktop.LegacyV2RuntimeActivationPolicy">
            <summary>
            Configure the LegacyV2RuntimeActivationPolicy from code. 
            See <see href="https://msdn.microsoft.com/de-de/library/bbx34a2h.aspx" /> for documentation.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.LegacyV2RuntimeActivationPolicy.Activate">
            <summary>
            Activates the LegacyV2RuntimeActivationPolicy. 
            <para />
            Useful e.g. for unit tests where you have no access to the app.config of the test runner process.
            </summary>
        </member>
        <member name="T:TomsToolbox.Desktop.SafeNativeMemory">
            <summary>
            Represents a wrapper class for a buffer allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeNativeMemory" /> class with no buffer allocated.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeNativeMemory" /> class.
            </summary>
            <param name="size">The size of the buffer to allocate.</param>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeNativeMemory" /> class.
            </summary>
            <param name="handle">The handle to the buffer for which this instance will take ownership.</param>
            <param name="size">The allocated size of the  allocated block.</param>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.Allocate(System.Int32)">
            <summary>
            Allocates a buffer with the specified size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.ReadIntPtr">
            <summary>
            Reads a processor native sized integer from unmanaged memory.
            </summary>
            <returns>
            The IntPtr read.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory.ReadInt32">
            <summary>
            Reads a 32-bit signed integer from unmanaged memory.
            </summary>
            <returns>
            The 32-bit signed integer read.
            </returns>
        </member>
        <member name="P:TomsToolbox.Desktop.SafeNativeMemory.IsInvalid">
            <summary>
            When overridden in a derived class, gets a value indicating whether the handle value is invalid.
            </summary>
            <returns>
            true if the handle value is invalid; otherwise, false.
            </returns>
        </member>
        <member name="P:TomsToolbox.Desktop.SafeNativeMemory.Size">
            <summary>
            Gets the size of the allocated buffer.
            </summary>
        </member>
        <member name="T:TomsToolbox.Desktop.SafeNativeMemory`1">
            <summary>
            Represents a wrapper class for a buffer allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" /> and the size of <typeparamref name="T" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeNativeMemory`1" /> class.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeNativeMemory`1" /> class.
            </summary>
            <param name="size">The size of the buffer to allocate.</param>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory`1.op_Explicit(TomsToolbox.Desktop.SafeNativeMemory{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:TomsToolbox.Desktop.SafeNativeMemory" /> to <see cref="T:System.IntPtr" />.
            </summary>
            <param name="wrapper">The memory.<p /><c>[NotNull]</c></param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeNativeMemory`1.ToStructure">
            <summary>
            Marshal the memory from native to .NET.
            </summary>
            <returns>The .NET structure.</returns>
        </member>
        <member name="T:TomsToolbox.Desktop.SafeTokenHandle">
            <summary>
            Represents a wrapper class for a token handle.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeTokenHandle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.SafeTokenHandle" /> class.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:TomsToolbox.Desktop.SafeTokenHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:TomsToolbox.Desktop.TryCastExtension">
            <summary>
            Entry point to create the <see cref="T:TomsToolbox.Desktop.TryCastWorker`1" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastExtension.TryCast``1(``0)">
            <summary>
            Creates the <see cref="T:TomsToolbox.Desktop.TryCastWorker`1" /> object to get a fluent notation for try-casting types.<para />
            This pattern avoids heavily nested if (class is type) / else chains when testing for more than one possible cast.
            <p /><c>[NotNull]</c></summary>
            <remarks>
            This has been somewhat superseded by the new C# language feature switch() { case Type variable: ... },
            but for some complex scenarios it might still have some advantages.
            </remarks>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <returns>The <see cref="T:TomsToolbox.Desktop.TryCastWorker`1" /> object.</returns>
            <example>
            <code language="C#"><![CDATA[
            schedule.TryCast()
                .When<SingleSchedule>(x => x.Remove())
                .When<RecurrentSchedule>(x = > x.AddExceptionDate(date))
                .ElseThrow();
            ]]></code>
            </example>
        </member>
        <member name="T:TomsToolbox.Desktop.TryCastWorker`1">
            <inheritdoc />
            <summary>
            Provide fluent notation for try-casting types.<para />
            Create this object using <see cref="M:TomsToolbox.Desktop.TryCastExtension.TryCast``1(``0)" />
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`1.When``1(System.Action{``0})">
            <summary>
            Tries to cast the value to <typeparamref name="TTarget" />; if the cast succeeds, the action is executed.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="action">The action.<p /><c>[NotNull]</c></param>
            <returns>The object itself to continue with fluent notation.</returns>
            <remarks>
            If any previous method in the fluent chain has already succeeded, this method does nothing.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`1.Else(System.Action{`0})">
            <summary>
            Executes the action if no previous cast has succeeded.
            </summary>
            <param name="action">The action.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`1.Returning``1">
            <summary>
            Adds a return value to the fluent chain.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>The <see cref="T:TomsToolbox.Desktop.TryCastWorker`2" /> object.</returns>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`1.Returning``1(``0)">
            <summary>
            Adds a return value to the fluent chain.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="defaultValue">The default value of the result if no cast succeeds.<p /><c>[CanBeNull]</c></param>
            <returns>
            The <see cref="T:TomsToolbox.Desktop.TryCastWorker`2" /> object.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`1.WrapAction``1(System.Action{``0},``0)">
            <summary>
            Wraps the action so it can be used where a function is expected.
            </summary>
        </member>
        <member name="T:TomsToolbox.Desktop.TryCastWorker`2">
            <inheritdoc />
            <summary>
            Provide fluent notation for try-casting types and returning a result.<para />
            Create this object using <see cref="M:TomsToolbox.Desktop.TryCastWorker`1.Returning``1" />
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:TomsToolbox.Desktop.TryCastWorker`2.Result">
            <summary>
            Gets the result of the action of the first succeeded cast.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`2.When``1(System.Func{``0,`1})">
            <summary>
            Tries to cast the value to <typeparamref name="TTarget" />; if the cast succeeds, the action is executed and the result is stored in the <see cref="P:TomsToolbox.Desktop.TryCastWorker`2.Result" /> property.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="action">The action.<p /><c>[NotNull]</c></param>
            <returns>The object itself to continue with fluent notation.</returns>
            <remarks>
            If any previous method in the fluent chain has already succeeded, this method does nothing.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorker`2.Else(System.Func{`0,`1})">
            <summary>
            Executes the action and returns the result if no previous cast has succeeded.
            <p /><c>[CanBeNull]</c></summary>
            <param name="action">The action.<p /><c>[NotNull]</c></param>
            <returns>The result.</returns>
        </member>
        <member name="T:TomsToolbox.Desktop.TryCastWorkerBase`2">
            <summary>
            Provide fluent notation for try-casting types and returning a result.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:TomsToolbox.Desktop.TryCastWorkerBase`2.Value">
            <summary>
            Gets the value to cast.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Desktop.TryCastWorkerBase`2.InternalResult">
            <summary>
            Gets the result of the action of the first succeeded cast.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorkerBase`2.ElseThrow">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if none of the casts have succeeded.
            <p /><c>[CanBeNull]</c></summary>
            <returns>This method never returns, but throws the exception.</returns>
            <exception cref="T:System.InvalidOperationException">Encountered an unexpected type: 'type name'</exception>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorkerBase`2.ElseThrow(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if none of the casts have succeeded.
            <p /><c>[CanBeNull]</c></summary>
            <param name="message">The message of the exception.<p /><c>[CanBeNull]</c></param>
            <returns>This method never returns, but throws the exception.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="message" /></exception>
        </member>
        <member name="M:TomsToolbox.Desktop.TryCastWorkerBase`2.TryExecute``1(System.Func{``0,`1})">
            <summary>
            Tries to cast the value and executes the action if the cast was successful.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="action">The action.<p /><c>[NotNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Desktop.UserAccountControl">
            <summary>
            Helper Functions for Privileges and Elevation Status
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.PromptForCredential(System.IntPtr,System.String,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Prompts the user for credential.
            <p /><c>[CanBeNull]</c></summary>
            <param name="parentHandle">The parent for the dialog.</param>
            <param name="caption">The caption.<p /><c>[CanBeNull]</c></param>
            <param name="message">The message.<p /><c>[CanBeNull]</c></param>
            <param name="authenticationError">The previous authentication error, if any; 0 to hide previous error information.</param>
            <param name="template">The credential used to initialize the dialog; maybe <c>null</c> to start with an empty dialog.<p /><c>[CanBeNull]</c></param>
            <returns>
            The credentials entered by the user, or <c>null</c> if the user has canceled the operation.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.LogOnInteractiveUser(System.Net.NetworkCredential,TomsToolbox.Desktop.SafeTokenHandle@)">
            <summary>
            Logs on the user with the given credentials as an interactive user.
            </summary>
            <param name="credential">The credential.<p /><c>[NotNull]</c></param>
            <param name="userToken">The user token.<p /><c>[CanBeNull]</c></param>
            <returns>
            0 if the function succeeds, a HRESULT of the last error if the function fails.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.LogOnInteractiveUser(System.String,System.String,System.String,TomsToolbox.Desktop.SafeTokenHandle@)">
            <summary>
            Logs on the user with the given credentials as an interactive user.
            </summary>
            <param name="userName">Name of the user.<p /><c>[CanBeNull]</c></param>
            <param name="domain">The domain.<p /><c>[CanBeNull]</c></param>
            <param name="password">The password.<p /><c>[CanBeNull]</c></param>
            <param name="userToken">The user token.<p /><c>[CanBeNull]</c></param>
            <returns>
            0 if the function succeeds, a HRESULT of the last error if the function fails.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsCurrentUserInAdminGroup">
            <summary>
            The function checks whether the primary access token of the process belongs 
            to a user account that is a member of the local Administrators group, even if 
            it currently is not elevated.
            </summary>
            <returns>
            Returns true if the primary access token of the process belongs to user 
            account that is a member of the local Administrators group. Returns false 
            if the token does not.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            When any native Windows API call fails, the function throws a Win32Exception with the last error code.
            </exception>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsUserInAdminGroup(TomsToolbox.Desktop.SafeTokenHandle)">
            <summary>
            The function checks whether the object associated with the access token belongs
            to a user account that is a member of the local Administrators group, even if
            it currently is not elevated.
            </summary>
            <param name="userToken">The user token.<p /><c>[NotNull]</c></param>
            <returns>
            Returns true if the object associated with the access token belongs to user
            account that is a member of the local Administrators group. Returns false
            if the token does not.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">When any native Windows API call fails, the function throws a Win32Exception with the last error code.</exception>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsRunAsAdmin">
            <summary>
            The function checks whether the current process is run as administrator.
            In other words, it dictates whether the primary access token of the 
            process belongs to user account that is a member of the local 
            Administrators group and it is elevated.
            </summary>
            <returns>
            Returns true if the primary access token of the process belongs to user 
            account that is a member of the local Administrators group and it is 
            elevated. Returns false if the token does not.
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsCurrentUserInGroup(System.String)">
            <summary>
            Determines whether the current user is in the specified group.
            </summary>
            <param name="groupName">Name of the group.<p /><c>[CanBeNull]</c></param>
            <returns>
            <c>true</c> if the user blongs to the specified group; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsUserInGroup(TomsToolbox.Desktop.SafeTokenHandle,System.String)">
            <summary>
            Determines whether the current user is in the specified group.
            </summary>
            <param name="userToken">The user token.<p /><c>[NotNull]</c></param>
            <param name="groupName">Name of the group.<p /><c>[CanBeNull]</c></param>
            <returns>
            <c>true</c> if the user blongs to the specified group; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.IsProcessElevated">
            <summary>
            The function gets the elevation information of the current process. It 
            dictates whether the process is elevated or not. Token elevation is only 
            available on Windows Vista and newer operating systems, thus 
            IsProcessElevated throws a C++ exception if it is called on systems prior 
            to Windows Vista. It is not appropriate to use this function to determine 
            whether a process is run as administartor.
            </summary>
            <returns>
            Returns true if the process is elevated. Returns false if it is not.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            When any native Windows API call fails, the function throws a Win32Exception 
            with the last error code.
            </exception>
            <remarks>
            TOKEN_INFORMATION_CLASS provides TokenElevationType to check the elevation 
            type (TokenElevationTypeDefault / TokenElevationTypeLimited / 
            TokenElevationTypeFull) of the process. It is different from TokenElevation 
            in that, when UAC is turned off, elevation type always returns 
            TokenElevationTypeDefault even though the process is elevated (Integrity 
            Level == High). In other words, it is not safe to say if the process is 
            elevated based on elevation type. Instead, we should use TokenElevation. 
            </remarks>
        </member>
        <member name="M:TomsToolbox.Desktop.UserAccountControl.GetProcessIntegrityLevel">
            <summary>
            The function gets the integrity level of the current process. Integrity 
            level is only available on Windows Vista and newer operating systems, thus 
            GetProcessIntegrityLevel throws a C++ exception if it is called on systems 
            prior to Windows Vista.
            </summary>
            <returns>
            Returns the integrity level of the current process. It is usually one of 
            these values:
            
               SECURITY_MANDATORY_UNTRUSTED_RID - means untrusted level. It is used 
               by processes started by the Anonymous group. Blocks most write access.
               (SID: S-1-16-0x0)
               
               SECURITY_MANDATORY_LOW_RID - means low integrity level. It is used by
               Protected Mode Internet Explorer. Blocks write acess to most objects 
               (such as files and registry keys) on the system. (SID: S-1-16-0x1000)
            
               SECURITY_MANDATORY_MEDIUM_RID - means medium integrity level. It is 
               used by normal applications being launched while UAC is enabled. 
               (SID: S-1-16-0x2000)
               
               SECURITY_MANDATORY_HIGH_RID - means high integrity level. It is used 
               by administrative applications launched through elevation when UAC is 
               enabled, or normal applications if UAC is disabled and the user is an 
               administrator. (SID: S-1-16-0x3000)
               
               SECURITY_MANDATORY_SYSTEM_RID - means system integrity level. It is 
               used by services and other system-level applications (such as Wininit, 
               Winlogon, Smss, etc.)  (SID: S-1-16-0x4000)
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            When any native Windows API call fails, the function throws a Win32Exception 
            with the last error code.
            </exception>
        </member>
        <member name="P:TomsToolbox.Desktop.UserAccountControl.UacShieldIcon">
            <summary>
            Gets a handle of the UAC (user account control) shield icon.
            </summary>
            <value>The handle of the icon.</value>
            <returns>
            The handle of the UAC (user account control) shield icon.
            </returns>
        </member>
        <member name="T:TomsToolbox.Desktop.ValidationTemplate">
            <summary>
            A validation template for using Validar.Fody (<see href="https://github.com/Fody/Validar" />) with data annotations (<see cref="N:System.ComponentModel.DataAnnotations" />).<para />
            </summary>
            <example>
            To activate the validation template just add this line to your AssemblyInfo.cs after you have installed the Validar.Fody package:<para />
            <code language="CS">
            [assembly: ValidationTemplateAttribute(typeof(TomsToolbox.Desktop.ValidationTemplate))]
            </code>
            </example>
        </member>
        <member name="M:TomsToolbox.Desktop.ValidationTemplate.#ctor(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Desktop.ValidationTemplate" /> class.
            </summary>
            <param name="target">The target.<p /><c>[NotNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Desktop.ValidationTemplate.Error">
            <inheritdoc />
        </member>
        <member name="P:TomsToolbox.Desktop.ValidationTemplate.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="E:TomsToolbox.Desktop.ValidationTemplate.ErrorsChanged">
            <summary>
            Raised when the errors for a property has changed.
            </summary>
        </member>
        <member name="T:TomsToolbox.Desktop.WebHelper">
            <summary>
            Helper for web methods.
            </summary>
        </member>
        <member name="M:TomsToolbox.Desktop.WebHelper.CreateHttpWebRequest(System.Uri)">
            <summary>
            Creates an HTTP web request with the system proxy settings.
            <p /><c>[NotNull]</c></summary>
            <param name="uri">The URI.<p /><c>[NotNull]</c></param>
            <returns>The request.</returns>
        </member>
        <member name="M:TomsToolbox.Desktop.WebHelper.Download(System.Uri)">
            <summary>
            Downloads the data from the specified URI using a GET request.
            <p /><c>[NotNull]</c></summary>
            <param name="uri">The URI.<p /><c>[NotNull]</c></param>
            <returns>A stream containing the downloaded data.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>
